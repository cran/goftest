head	1.10;
access;
symbols;
locks
	adrian:1.10; strict;
comment	@# @;


1.10
date	2018.06.06.08.25.51;	author adrian;	state Exp;
branches;
next	1.9;

1.9
date	2018.06.06.08.10.11;	author adrian;	state Exp;
branches;
next	1.8;

1.8
date	2018.06.06.08.05.21;	author adrian;	state Exp;
branches;
next	1.7;

1.7
date	2018.03.29.13.51.49;	author adrian;	state Exp;
branches;
next	1.6;

1.6
date	2014.06.24.02.12.20;	author adrian;	state Exp;
branches;
next	1.5;

1.5
date	2014.06.24.01.54.16;	author adrian;	state Exp;
branches;
next	1.4;

1.4
date	2014.06.09.05.07.09;	author adrian;	state Exp;
branches;
next	1.3;

1.3
date	2014.06.09.05.02.30;	author adrian;	state Exp;
branches;
next	1.2;

1.2
date	2014.06.09.04.34.57;	author adrian;	state Exp;
branches;
next	1.1;

1.1
date	2014.06.09.04.26.35;	author adrian;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Summary: tweak
@
text
@##
## andarl.R
##
##  Anderson-Darling test and null distribution
##
## $Revision: 1.9 $ $Date: 2018/06/06 08:10:11 $
##

ad.test <- function(x, null="punif", ..., estimated=FALSE, nullname) {
  xname <- deparse(substitute(x))
  nulltext <- deparse(substitute(null))
  if(is.character(null)) nulltext <- null
  if(missing(nullname) || is.null(nullname)) {
    reco <- recogniseCdf(nulltext)
    nullname <- if(!is.null(reco)) reco else 
                paste("distribution", sQuote(nulltext))
  }
  stopifnot(is.numeric(x))
  x <- as.vector(x)
  n <- length(x)
  F0 <- getCdf(null)
  U <- F0(x, ...)
  if(any(U < 0 | U > 1))
    stop("null distribution function returned values outside [0,1]")
  if(!estimated || n <= 4) {
    #' simple null hypothesis
    z <- do.goftest.AD(U)
    PVAL <- z$pvalue
    STATISTIC <- z$adstat
    names(STATISTIC) <- "An"
  } else {
    #' composite - use Braun (1980)
    first <- sample(n, ceiling(n/2), replace=TRUE)
    z1 <- do.goftest.AD(U[first])
    z2 <- do.goftest.AD(U[-first])
    STATISTIC <- max(z1$adstat, z2$adstat)
    names(STATISTIC) <- "AnMax"
    PVAL <- 1 - (1 - z1$pvalue) * (1 - z2$pvalue)
  }
  METHOD <- c("Anderson-Darling test of goodness-of-fit",
              if(estimated) "(with Braun's adjustment)" else NULL,
              paste("Null hypothesis:", nullname))

  extras <- list(...)
  parnames <- intersect(names(extras), names(formals(F0)))
  if(length(parnames) > 0) {
    pars <- extras[parnames]
    pard <- character(length(parnames))
    for(i in seq_along(parnames))
      pard[i] <- paste(parnames[i], "=", paste(pars[[i]], collapse=" "))
    pard <- paste("with",
                  ngettext(length(pard), "parameter", "parameters"),
                  "  ", 
                  paste(pard, collapse=", "))
    METHOD <- c(METHOD, pard)
  }
  
  coda <- paste("Parameters assumed to",
                if(estimated) "have been estimated from data" else "be fixed")
  METHOD <- c(METHOD, coda)
  
  out <- list(statistic = STATISTIC,
               p.value = PVAL,
               method = METHOD,
               data.name = xname)
  class(out) <- "htest"
  return(out)
}

do.goftest.AD <- function(U) {
  ## Internal: call Marsaglia C code
  U <- sort(U)
  n <- length(U)
  z <- .C(CgofADtestR,
          x = as.double(U),
          n = as.integer(n),
          adstat = as.double(numeric(1)),
          pvalue = as.double(numeric(1)),
	  PACKAGE="goftest"
          )
  return(z[c("adstat", "pvalue")])
}

pAD <- function(q, n=Inf, lower.tail=TRUE, fast=TRUE) {
  q <- as.numeric(q)
  p <- rep(NA_real_, length(q))
  if(any(ones <- is.infinite(q) & (q == Inf)))
    p[ones] <- 1
  if(any(zeroes <- (is.finite(q) & q <= 0) | (is.infinite(q) & (q == -Inf))))
    p[zeroes] <- 0
  ok <- is.finite(q) & (q > 0)
  nok <- sum(ok)
  if(nok > 0) {
    if(is.finite(n)) {
      z <- .C(CgofADprobN,
              a       = as.double(q[ok]),
              na      = as.integer(nok),
              nsample = as.integer(n),
              prob    = as.double(numeric(nok)),
	      PACKAGE="goftest")
      p[ok] <- z$prob
    } else if(fast) {
      ## fast version adinf()
      z <- .C(CgofADprobApproxInf,
              a    = as.double(q[ok]),
              na   = as.integer(nok),
              prob = as.double(numeric(nok)),
	      PACKAGE="goftest")
      p[ok] <- z$prob
    } else {
      ## slow, accurate version ADinf()
      z <- .C(CgofADprobExactInf,
              a    = as.double(q[ok]),
              na   = as.integer(nok),
              prob = as.double(numeric(nok)),
	      PACKAGE="goftest")
      p[ok] <- z$prob
    }
      
  }
  if(!lower.tail)
    p <- 1 - p
  return(p)
}

qAD <- local({

  f <- function(x, N, P, Fast) {
    pAD(x, N, fast=Fast) - P
  }
    
  qAD <- function(p, n=Inf, lower.tail=TRUE, fast=TRUE) {
    ## quantiles of null distribution of Anderson-Darling test statistic
    stopifnot(all(p >= 0))
    stopifnot(all(p <= 1))
    if(!lower.tail) p <- 1-p
    ans <- rep(NA_real_, length(p))
    for(i in which(p >= 0 & p < 1)) 
      ans[i] <- uniroot(f, c(0, 1), N=n, P=p[i], Fast=fast, extendInt="up")$root
    return(ans)
  }

  qAD
})


  

@


1.9
log
@Summary: d'oh
@
text
@d6 1
a6 1
## $Revision: 1.8 $ $Date: 2018/06/06 08:05:21 $
d58 2
a59 2
  coda <- paste("Parameters assumed to be",
                if(estimated) "estimated from data" else "fixed")
@


1.8
log
@Summary: handles composite case using Braun 1980
@
text
@d6 1
a6 1
## $Revision: 1.7 $ $Date: 2018/03/29 13:51:49 $
d59 1
a59 1
                if(!estimated) "estimated from data" else "fixed")
@


1.7
log
@Summary: removed unused variable
@
text
@d6 1
a6 1
## $Revision: 1.6 $ $Date: 2014/06/24 02:12:20 $
d9 1
a9 1
ad.test <- function(x, null="punif", ..., nullname) {
d21 1
a21 3
  F0 <- if(is.function(null)) null else
        if(is.character(null)) get(null, mode="function") else
        stop("Argument 'null' should be a function, or the name of a function")
d25 15
a39 12
  U <- sort(U)
  ## call Marsaglia C code
  z <- .C(CgofADtestR,
          x = as.double(U),
          n = as.integer(n),
          adstat = as.double(numeric(1)),
          pvalue = as.double(numeric(1)),
	  PACKAGE="goftest"
          )
  STATISTIC <- z$adstat
  names(STATISTIC) <- "An"
  PVAL <- z$pvalue
d41 1
d43 1
d48 1
a48 1
    pard <- character(0)
d57 5
d68 14
@


1.6
log
@polished output
@
text
@d6 1
a6 1
## $Revision: 1.5 $ $Date: 2014/06/24 01:54:16 $
a27 1
  k <- seq_len(n)
d29 1
a29 1
  z <- .C("ADtestR",
d33 2
a34 1
          pvalue = as.double(numeric(1))
d73 1
a73 1
      z <- .C("ADprobN",
d77 2
a78 2
              prob    = as.double(numeric(nok))
              )
d82 1
a82 1
      z <- .C("ADprobApproxInf",
d85 2
a86 2
              prob = as.double(numeric(nok))
              )
d90 1
a90 1
      z <- .C("ADprobExactInf",
d93 2
a94 2
              prob = as.double(numeric(nok))
              )
@


1.5
log
@recognises standard distributions
@
text
@d6 1
a6 1
## $Revision: 1.4 $ $Date: 2014/06/09 05:07:09 $
d39 15
a53 2
  METHOD <- paste("Anderson-Darling test of", nullname)
  ALTERN <- paste("Not the", nullname)
a55 1
               alternative = ALTERN,
@


1.4
log
@tweak
@
text
@d6 1
a6 1
## $Revision: 1.3 $ $Date: 2014/06/09 05:02:30 $
d13 3
a15 2
  if(missing(nullname))
    nullname <- if(identical(null, "punif")) "uniform distribution" else
d17 1
d50 1
a50 1
pAD <- function(q, n=Inf, lower.tail=TRUE) {
d68 8
d77 2
a78 1
      z <- .C("ADprobInf",
d85 1
d94 2
a95 2
  f <- function(x, N, P) {
    pAD(x, N) - P
d98 1
a98 1
  qAD <- function(p, n=Inf, lower.tail=TRUE) {
d105 1
a105 1
      ans[i] <- uniroot(f, c(0, 1), N=n, P=p[i], extendInt="up")$root
@


1.3
log
@buglet fix
@
text
@d6 1
a6 1
## $Revision: 1.2 $ $Date: 2014/06/09 04:34:57 $
d35 1
d91 2
a92 1
    for(i in which(p > 0 & p < 1)) 
@


1.2
log
@tweaked
@
text
@d6 1
a6 1
## $Revision: 1.1 $ $Date: 2014/06/09 04:26:35 $
d52 1
a52 1
  if(any(zeroes <- (is.finite(q) & q < 0) | (is.infinite(q) & (q == -Inf))))
d54 1
a54 1
  ok <- is.finite(q) & (q >= 0)
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
## $Revision$ $Date$
d47 1
a47 1
pAnDarl <- function(q, n=Inf, lower.tail=TRUE) {
d78 23
@
