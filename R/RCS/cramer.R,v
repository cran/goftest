head	1.9;
access;
symbols;
locks
	adrian:1.9; strict;
comment	@# @;


1.9
date	2019.11.27.01.50.20;	author adrian;	state Exp;
branches;
next	1.8;

1.8
date	2019.11.26.04.05.19;	author adrian;	state Exp;
branches;
next	1.7;

1.7
date	2019.11.26.03.59.06;	author adrian;	state Exp;
branches;
next	1.6;

1.6
date	2019.11.26.03.55.16;	author adrian;	state Exp;
branches;
next	1.5;

1.5
date	2019.11.26.03.49.24;	author adrian;	state Exp;
branches;
next	1.4;

1.4
date	2019.11.26.03.31.49;	author adrian;	state Exp;
branches;
next	1.3;

1.3
date	2019.11.26.03.29.57;	author adrian;	state Exp;
branches;
next	1.2;

1.2
date	2014.06.09.04.34.49;	author adrian;	state Exp;
branches;
next	1.1;

1.1
date	2014.06.08.10.20.20;	author adrian;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Summary: changed epsilon
@
text
@##
## cramer.R
##
## Distribution of the Cramer-Von Mises test statistic
##
## $Revision: 1.8 $ $Date: 2019/11/26 04:05:19 $
##
## ..................................................................
##
##      From Matlab code written by Julian Faraway (faraway@@umich.edu)
##	Translated to R by Adrian Baddeley
##
##	Reference: S. Csorgo and J.J. Faraway,
##      The exact and asymptotic distributions of Cramer-von Mises statistics
##	Journal of the Royal Statistical Society, Series B
##      58 (1996) 221-234.
##

pCvM <- local({

  ## all functions are vectorised
  D2 <- function(x) {
    z <- (x^2)/4
    b <- besselK(x=z, nu=1/4) + besselK(x=z, nu=3/4)
    b * sqrt((x^3)/(8*pi))
  }

  D3 <- function(x) {
    z <- (x^2)/4
    b <- 2*besselK(z, nu=1/4) + 3*besselK(z, nu=3/4) - besselK(z, nu=5/4)
    b * sqrt((x^5)/(32 * pi))
  }

  ED2 <- function(x) { exp(-(x^2)/4) * D2(x) }

  ED3 <- function(x) { exp(-(x^2)/4) * D3(x) }

  Ak <- function(k, x) {
    #' original code (transliterated from Matlab) for reference
    twosqrtx <- 2 * sqrt(x)
    x34 <- x^(3/4)
    x54 <- x^(5/4)
    (2*k+1)*gamma(k+1/2)*ED2((4*k+3)/twosqrtx)/(9*x34) +
      gamma(k+1/2)*ED3((4*k+1)/twosqrtx)/(72*x54) +
        2*(2*k+3)*gamma(k+3/2)*ED3((4*k+5)/twosqrtx)/(12*x54) +
          7*(2*k+1)*gamma(k+1/2)*ED2((4*k+1)/twosqrtx)/(144*x34) +
            7*(2*k+1)*gamma(k+1/2)*ED2((4*k+5)/twosqrtx)/(144*x34)
  }

  AkOnFk <- function(k, x) {
    #' calculates A(k, x)/factorial(k)
    #' Adrian Baddeley, 26 nov 2019
    twosqrtx <- 2 * sqrt(x)
    fk1x <- (4*k+1)/twosqrtx
    fk3x <- (4*k+3)/twosqrtx
    fk5x <- (4*k+5)/twosqrtx
    x34 <- x^(3/4)
    x54 <- x^(5/4)
    #'evaluate gamma(k+1/2)/factorial(k) = gamma(k+1/2)/gamma(k+1)
    gf <- if(k < 100) {
            gamma(k+1/2)/factorial(k)
          } else if(k <= 1e15) {
            exp(lgamma(k+1/2)-lgamma(k+1))
          } else exp(-10*k)
    gf * (
      ED3(fk1x)/(72*x54) +
      (2*k+1) * (
        ED2(fk3x)/(9*x34) +
        (2*k+3)*ED3(fk5x)/(12*x54) +
        7*(ED2(fk1x)+ED2(fk5x))/(144*x34)
      )
    )
  }

  psi1 <- function(x) {
    ## Leading term in expansion of small-sample cdf of Cramer-Von Mises
    m <- length(x)
    tot <- numeric(m)
    active <- rep(TRUE, m)
    for(k in 0:200) {
      ## WAS:      z <- -Ak(k,x[active])/(pi*factorial(k))
      z <- -AkOnFk(k,x[active])/pi
      tot[active] <- tot[active] + z
      active[active] <- (abs(z) >= 1e-9)
      if((k > 20) && (ok <- !any(active))) break
    }
    if(!ok)
      warning("Series did not converge after 200 iterations (small sample cdf)",
              call.=FALSE)
    return(tot + Vinf(x)/12)
  }

  Vinf <- function(x) {
    ## cdf of asymptotic distribution of Cramer-von Mises
    m <- length(x)
    tot <- numeric(m)
    active <- rep(TRUE, m)
    for(k in 0:200) {
      q <- (4*k+1)^2/(16*x[active])
      z <- ((-1)^k)*choose(-1/2,k)*sqrt(4*k+1)*
        exp(-q)*besselK(q, nu=1/4)/sqrt(x[active])
      tot[active] <- tot[active] + z
      active[active] <- (abs(z) >= 1e-9)
      if((k > 10) && (ok <- !any(active))) break
    }
    if(!ok)
      warning("Series did not converge after 200 iterations (asymptotic cdf)",
              call.=FALSE)
    return(tot/pi)
  }

  Vn <- function(x, n) {
    ## cdf of small-sample distribution of Cramer-von Mises statistic
    ## First order approximation, Csorgo and Faraway equation (1.8)
    Vinf(x) + psi1(x)/n
  }
    
  pCvM <- function(q, n=Inf, lower.tail=TRUE) {
    ## cdf of null distribution of Cramer-von Mises test statistic
    nn <- min(100, n)
    lower <- 1/(12 * nn)
    upper <- nn/3
    m <- length(q)
    p <- numeric(m)
    unknown <- rep(TRUE, m)
    if(any(zeroes <- (q <= lower))) {
      p[zeroes] <- 0
      unknown[zeroes] <- FALSE
    }
    if(any(ones <- (q >= upper))) {
      p[ones] <- 1
      unknown[ones] <- FALSE
    }
    if(any(unknown))
      p[unknown] <- if(is.infinite(n)) Vinf(q[unknown]) else Vn(q[unknown], n)
    p[p < 2e-10] <- 0
    p[(1-p) < 2e-10] <- 1
    return(if(lower.tail) p else 1-p)
  }

  pCvM
})

qCvM <- local({

  f <- function(x, N, P) {
    pCvM(x, N) - P
  }
    
  qCvM <- function(p, n=Inf, lower.tail=TRUE) {
    ## quantiles of null distribution of Cramer-von Mises test statistic
    stopifnot(all(p >= 0))
    stopifnot(all(p <= 1))
    if(!lower.tail) p <- 1-p
    lower <- if(is.finite(n)) (1/(12 * n)) else 0
    upper <- if(is.finite(n)) n/3 else Inf
    ans <- numeric(length(p))
    small <- (p <= 2e-10)
    large <- (1-p <= 2e-10)
    ans[small] <- lower
    ans[large] <- upper
    for(i in which(!small & !large))
      ans[i] <- uniroot(f, c(lower, 1), N=n, P=p[i], extendInt="up")$root
    return(ans)
  }

  qCvM
})


  

@


1.8
log
@Summary: more tweaks
@
text
@d6 1
a6 1
## $Revision: 1.7 $ $Date: 2019/11/26 03:59:06 $
d136 2
a137 2
    p[p < 2e-11] <- 0
    p[(1-p) < 2e-11] <- 1
d158 2
a159 2
    small <- (p <= 2e-11)
    large <- (1-p <= 2e-11)
@


1.7
log
@Summary: more tweaks
@
text
@d6 1
a6 1
## $Revision: 1.6 $ $Date: 2019/11/26 03:55:16 $
d85 1
a85 1
      if(ok <- !any(active)) break
d104 1
a104 1
      if(ok <- !any(active)) break
@


1.6
log
@Summary: more numerical stabilisation
@
text
@d6 1
a6 1
## $Revision: 1.5 $ $Date: 2019/11/26 03:49:24 $
d158 5
a162 3
    ans[p == 0] <- lower
    ans[p == 1] <- upper
    for(i in which(p > 0 & p < 1)) 
@


1.5
log
@Summary: more tweaks
@
text
@d6 1
a6 1
## $Revision: 1.4 $ $Date: 2019/11/26 03:31:49 $
d136 2
@


1.4
log
@Summary: d'oh
@
text
@d6 1
a6 1
## $Revision: 1.3 $ $Date: 2019/11/26 03:29:57 $
d84 1
a84 1
      active[active] <- (abs(z) >= 1e-7)
d103 1
a103 1
      active[active] <- (abs(z) >= 1e-7)
d120 3
a122 7
    if(is.finite(n)) {
      lower <- 1/(12 * n)
      upper <- n/3
    } else {
      lower <- 0
      upper <- Inf
    }
@


1.3
log
@Summary: bug fixes
@
text
@d6 1
a6 1
## $Revision: 1.2 $ $Date: 2014/06/09 04:34:49 $
d71 1
@


1.2
log
@renamed
@
text
@d6 1
a6 1
## $Revision: 1.1 $ $Date: 2014/06/08 10:20:20 $
d39 1
d50 24
d79 3
a81 2
    for(k in 0:20) {
      z <- -Ak(k,x[active])/(pi*factorial(k))
d84 1
a84 1
      if(!any(active)) break
d86 3
d97 1
a97 1
    for(k in 0:10) {
d103 1
a103 1
      if(!any(active)) break
d105 3
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
## $Revision$ $Date$
d19 1
a19 1
pcramer <- local({
d85 1
a85 1
  pcramer <- function(q, n=Inf, lower.tail=TRUE) {
d110 1
a110 1
  pcramer
d113 1
a113 1
qcramer <- local({
d116 1
a116 1
    pcramer(x, N) - P
d119 1
a119 1
  qcramer <- function(p, n=Inf, lower.tail=TRUE) {
d134 1
a134 1
  qcramer
@
